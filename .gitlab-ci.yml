before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  POSTGRES_DB: fastservice
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_HOST: postgres


stages:
  - test
  - build
  - deploy

unit-test:
  stage: test
  image: python:3.9  
  services:
    - name: postgres:13      
  before_script:
    - ''
  script:
    - export SERVICE_NAME="Testing Service"
    - export SERVICE_DESCRIPTION="Testing Service"

    - export FASTSERVICE_POSTGRES_DB=$POSTGRES_DB
    - export FASTSERVICE_POSTGRES_USER=$POSTGRES_USER
    - export FASTSERVICE_POSTGRES_PASSWD=$POSTGRES_PASSWORD
    - export FASTSERVICE_POSTGRES_HOST=$POSTGRES_HOST

    - export AUTH0_DOMAIN=domain.example.com
    - export API_IDENTIFIER=api.example.com
    - export ALGORITHMS=RSA256
    - export M2M_USER=m2m
    - export API_CLIENT_ID=api_client_id
    - export API_CLIENT_SECRET=api_client_secret
    
    - export LOGGING_LEVEL="DEBUG"
    - export ORIGINS="*"
    - apt update
    - apt install -y postgresql-client
    - pip install -r ./app/requirements.txt
    - pip install -U fastapi
    - pip install -U uvicorn[standard]
    - pip install -U pytest
    - pip install -U pytest-asyncio
    - pip install -U httpx
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - psql -h "$POSTGRES_HOST" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f "pgdump.sql"
    - pytest
  #   - pytest --junitxml=report.xml
  # artifacts:
  #   when: always
  #   reports:
  #     junit: report.xml
  tags:
    - prod

build-prod:
  stage: build
  script:
    - docker build -f Dockerfile_Prod -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  tags:
    - prod

deploy-prod:
  stage: deploy
  script:
    - export DOCKERIMG=$IMAGE_TAG
    - docker stack deploy -c fastservice_stack.yml --with-registry-auth fastservice
  environment:
    name: prod
  tags:
    - prod